{"ast":null,"code":"import _regeneratorRuntime from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { green } from 'ansi-colors';\nimport './App.css';\nimport Navbar from './Nav.js';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Rwd from '../truffle_abis/RWD.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    //calls once we load the page\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //Connect to web3 provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereuem) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereuem.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  alert(\"Mummu\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() //convert eth\n\n  }, {\n    key: \"tokenToWei\",\n    value: function tokenToWei(number) {\n      //return web3.utils.toWei (number,'Ether');\n      return Web3.utils.toWei(number, 'Ether');\n    }\n  }, {\n    key: \"tokenFromWei\",\n    value: function tokenFromWei(number) {\n      return Web3.utils.fromWei(number);\n    } //this gets the data from the blockchain\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, _tether, tetherBalance, rwdData, rwd, rwdBalance;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                }); //get the network id of network user is connected to\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //Load the tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                _tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: _tether\n                });\n                _context3.next = 14;\n                return _tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert('Tether contract not depoyed');\n\n              case 19:\n                //Load the RWD contract\n                rwdData = Rwd.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 25;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Tether contract not depoyed');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x2',\n      tether: {},\n      rwd: {},\n      decentraBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","green","Navbar","Web3","Tether","Rwd","App","loadWeb3","loadBlockchainData","window","ethereuem","web3","ethereum","enable","currentProvider","alert","number","utils","toWei","fromWei","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","props","decentraBank","stakingBalance","loading"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport { green } from 'ansi-colors'\nimport './App.css'\nimport Navbar from './Nav.js'\nimport Web3 from 'web3'\nimport Tether from '../truffle_abis/Tether.json'\nimport Rwd from '../truffle_abis/RWD.json'\n\nclass App extends Component{\n    //calls once we load the page\n    async UNSAFE_componentWillMount(){\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    //Connect to web3 provider\n    async loadWeb3() {\n        if(window.ethereuem){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereuem.enable()\n        }else if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            alert(\"Mummu\")\n        }\n    }\n\n    //convert eth\n    tokenToWei (number){\n        //return web3.utils.toWei (number,'Ether');\n        return Web3.utils.toWei(number, 'Ether');\n    }\n\n    tokenFromWei(number){\n        return Web3.utils.fromWei(number);\n    }\n\n    //this gets the data from the blockchain\n    async loadBlockchainData(){\n        const web3 = window.web3\n        const account = await web3.eth.getAccounts()\n        this.setState({account: account[0]})\n\n        //get the network id of network user is connected to\n        const networkId = await web3.eth.net.getId()\n\n        //Load the tether contract\n        const tetherData = Tether.networks[networkId]\n        if(tetherData){\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n            this.setState({tether})\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString() })\n        }else{\n            window.alert('Tether contract not depoyed')\n        }\n\n        //Load the RWD contract\n        const rwdData = Rwd.networks[networkId]\n        if(rwdData){\n            const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n            this.setState({rwd})\n            let rwdBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance.toString() })\n        }else{\n            window.alert('Tether contract not depoyed')\n        }\n    }\n\n    constructor(props){\n        super(props)\n        this.state = {\n            account: '0x2',\n            tether: {},\n            rwd : {},\n            decentraBank: {},\n            tetherBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <Navbar account={this.state.account}/>\n                <div className=\"text-center\" >\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}