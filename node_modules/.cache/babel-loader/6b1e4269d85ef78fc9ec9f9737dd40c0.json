{"ast":null,"code":"import _regeneratorRuntime from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { green } from 'ansi-colors';\nimport './App.css';\nimport Navbar from './Nav.js';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Rwd from '../truffle_abis/RWD.json';\nimport DecentraBank from '../truffle_abis/DecentraBank.json';\nimport Main from './Main.js';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    //calls once we load the page\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //Connect to web3 provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereuem) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereuem.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  alert(\"Mummu\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() //convert eth\n\n  }, {\n    key: \"tokenToWei\",\n    value: function tokenToWei(number) {\n      //return web3.utils.toWei (number,'Ether');\n      return Web3.utils.toWei(number, 'Ether');\n    }\n  }, {\n    key: \"tokenFromWei\",\n    value: function tokenFromWei(number) {\n      return Web3.utils.fromWei(number);\n    } //this gets the data from the blockchain\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, DecentraBankData, decentraBank, decentraBankBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                }); //get the network id of network user is connected to\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //Load the tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert('Tether contract not depoyed');\n\n              case 19:\n                //Load the RWD contract\n                rwdData = Rwd.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 25;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log(this.state.rwdBalance);\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('RWD contract not depoyed');\n\n              case 31:\n                //Load the DecentraBank contract\n                DecentraBankData = DecentraBank.networks[networkId];\n\n                if (!DecentraBankData) {\n                  _context3.next = 41;\n                  break;\n                }\n\n                decentraBank = new web3.eth.Contract(DecentraBank.abi, DecentraBankData.address);\n                this.setState({\n                  decentraBank: decentraBank\n                });\n                _context3.next = 37;\n                return decentraBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                decentraBankBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: decentraBankBalance.toString()\n                }); //console.log(this.state.rwdBalance);\n\n                _context3.next = 42;\n                break;\n\n              case 41:\n                window.alert('Decentra Bank contract not depoyed');\n\n              case 42:\n                this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x2',\n      tether: {},\n      rwd: {},\n      decentraBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 41\n          }\n        }, \"LOADING...\") : content = /*#__PURE__*/React.createElement(Main, {\n          account: this.state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 34\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"continer-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Main, {\n        account: this.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 33\n        }\n      }))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //find /Users/favor/Documents/EthPro -type f -exec grep -l \"million.money\" {} +\n//recruitment@voyatekgroup.com","map":{"version":3,"sources":["/Users/favor/Documents/EthPro/Alleth/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","green","Navbar","Web3","Tether","Rwd","DecentraBank","Main","App","loadWeb3","loadBlockchainData","window","ethereuem","web3","ethereum","enable","currentProvider","alert","number","utils","toWei","fromWei","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","console","log","DecentraBankData","decentraBank","stakingBalance","decentraBankBalance","loading","props","content","margin","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport { green } from 'ansi-colors'\nimport './App.css'\nimport Navbar from './Nav.js'\nimport Web3 from 'web3'\nimport Tether from '../truffle_abis/Tether.json'\nimport Rwd from '../truffle_abis/RWD.json'\nimport DecentraBank from '../truffle_abis/DecentraBank.json'\nimport Main from './Main.js'\n\nclass App extends Component{\n    //calls once we load the page\n    async UNSAFE_componentWillMount(){\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    //Connect to web3 provider\n    async loadWeb3() {\n        if(window.ethereuem){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereuem.enable()\n        }else if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            alert(\"Mummu\")\n        }\n    }\n\n    //convert eth\n    tokenToWei (number){\n        //return web3.utils.toWei (number,'Ether');\n        return Web3.utils.toWei(number, 'Ether');\n    }\n\n    tokenFromWei(number){\n        return Web3.utils.fromWei(number);\n    }\n\n    //this gets the data from the blockchain\n    async loadBlockchainData(){\n        const web3 = window.web3\n        const account = await web3.eth.getAccounts()\n        this.setState({account: account[0]})\n\n        //get the network id of network user is connected to\n        const networkId = await web3.eth.net.getId()\n\n        //Load the tether contract\n        const tetherData = Tether.networks[networkId]\n        if(tetherData){\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n            this.setState({tether})\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString() })\n        }else{\n            window.alert('Tether contract not depoyed')\n        }\n\n        //Load the RWD contract\n        const rwdData = Rwd.networks[networkId]\n        if(rwdData){\n            const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n            this.setState({rwd})\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance.toString() })\n            console.log(this.state.rwdBalance);\n        }else{\n            window.alert('RWD contract not depoyed')\n        }\n\n        //Load the DecentraBank contract\n        const DecentraBankData = DecentraBank.networks[networkId]\n        if(DecentraBankData){\n            const decentraBank = new web3.eth.Contract(DecentraBank.abi, DecentraBankData.address);\n            this.setState({decentraBank})\n            let decentraBankBalance = await decentraBank.methods.stakingBalance(this.state.account).call()\n            this.setState({stakingBalance: decentraBankBalance.toString() })\n            //console.log(this.state.rwdBalance);\n        }else{\n            window.alert('Decentra Bank contract not depoyed')\n        }\n\n        this.setState({loading:false});\n    }\n\n    constructor(props){\n        super(props)\n        this.state = {\n            account: '0x2',\n            tether: {},\n            rwd : {},\n            decentraBank: {},\n            tetherBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true\n        }\n    }\n\n    render(){\n        let content\n        {this.state.loading ? content = <p id='loader' className='text-center' style={{margin:'30px'}}> \n        LOADING...</p>:content = <Main account={this.state}/>}\n        return(\n            <div>\n                <Navbar account={this.state.account}/>\n                <div className=\"continer-fluid mt-5\" >\n                    <div className=\"row\">\n                        <main role='main'className='col-lg-12 ml-auto mr-auto' style={{maxWidth:'600px', minHeight:'100vm'}}>\n                            <div>\n                                <Main account={this.state}/>\n                            </div>\n                        </main>\n                    </div>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n//find /Users/favor/Documents/EthPro -type f -exec grep -l \"million.money\" {} +\n\n//recruitment@voyatekgroup.com"]},"metadata":{},"sourceType":"module"}